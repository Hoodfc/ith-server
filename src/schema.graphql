schema {
  query: Query
  mutation: Mutation
}

type Query {
  hello: String!
  getUser(name: String!): User
  getAllUsers: [User!]!
}

type Mutation {
  createUser(name: String!, password: String!, email: String): Error
  deleteUser(id: ID!): Boolean! @hasRoles(role: "ADMIN")
  updateUser(id: ID!, update: updateUserInput!): Boolean!
  login(name: String!, password: String!): Error
}

scalar Date

type Error {
  type: String!
  text: String!
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String
  role: String
  createdAt: Date
}

input updateUserInput {
  name: String
  password: String
  email: String
}

# import Error from "./error.type.graphql"
 # import Date from "./date.type.graphql"
directive @hasRoles(role: String) on FIELD | FIELD_DEFINITION
